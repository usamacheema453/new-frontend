// components/ShareChat.js

import React, { useState } from 'react';
import {
  View,
  Text,
  Modal,
  TouchableOpacity,
  StyleSheet,
  Share,
  Alert,
  Platform,
  ScrollView,
  Dimensions,
} from 'react-native';
import * as Clipboard from 'expo-clipboard';
import {
  X,
  Share as ShareIcon,
  Copy,
  Link,
  Download,
  Mail,
} from 'lucide-react-native';

const ShareChat = ({ visible, onClose, messages, chatTitle }) => {
  const [isSharing, setIsSharing] = useState(false);
  const [shareUrl, setShareUrl] = useState('');

  // Build the text of the chat
  const generateShareableText = () => {
    let content = `${chatTitle}\n\n`;
    messages.forEach((m) => {
      content += m.role === 'user'
        ? `üßë‚Äçüíª User: ${m.content}\n\n`
        : `ü§ñ Assistant: ${m.content}\n\n`;
    });
    content += `\n---\nGenerated by Super Power Engineer`;
    return content;
  };

  // Simulate a link being created
  const generateShareLink = () => {
    setIsSharing(true);
    setTimeout(() => {
      const mockId = Math.random().toString(36).substr(2, 9);
      setShareUrl(`https://superpower.engineer/chat/${mockId}`);
      setIsSharing(false);
    }, 1500);
  };

  // Clipboard copy via expo-clipboard
  const copyToClipboard = async (text) => {
    try {
      await Clipboard.setStringAsync(text);
      Alert.alert('Copied!', 'Content copied to clipboard');
    } catch {
      Alert.alert('Error', 'Failed to copy to clipboard');
    }
  };

  // Native share dialog
  const shareNative = async () => {
    try {
      const base = generateShareableText();
      const full = shareUrl ? `${base}\n\n${shareUrl}` : base;
      const result = await Share.share({ message: full, title: chatTitle });
      if (result.action === Share.sharedAction) {
        Alert.alert('Success', 'Chat shared successfully!');
      }
    } catch {
      Alert.alert('Error', 'Failed to share chat');
    }
  };

  // Download as .txt on web
  const downloadAsFile = () => {
    if (Platform.OS !== 'web') {
      Alert.alert('Not Available', 'Download is only on web');
      return;
    }
    const text = generateShareableText();
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${chatTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    Alert.alert('Success', 'Chat downloaded successfully!');
  };

  const isMobile = Dimensions.get('window').width < 768;

  return (
    <Modal visible={visible} transparent animationType="fade" onRequestClose={onClose}>
      <View style={styles.overlay}>
        <View style={[styles.modal, isMobile && styles.mobileModal]}>
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.title}>Share Chat</Text>
            <TouchableOpacity onPress={onClose} style={styles.closeButton}>
              <X size={24} color="#374151" />
            </TouchableOpacity>
          </View>

          {/* Body */}
          <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
            <Text style={styles.subtitle}>Share this conversation with others</Text>

            <View style={styles.optionsContainer}>
              {/* Link */}
              <TouchableOpacity
                style={styles.option}
                onPress={generateShareLink}
                disabled={isSharing}
              >
                <View style={styles.optionIcon}>
                  <Link size={20} color="#3B82F6" />
                </View>
                <View style={styles.optionContent}>
                  <Text style={styles.optionTitle}>
                    {shareUrl ? 'Link Generated' : 'Generate Share Link'}
                  </Text>
                  <Text style={styles.optionDescription}>
                    {shareUrl
                      ? 'Anyone with the link can view this chat'
                      : 'Create a link that others can use to view this chat'}
                  </Text>
                  {shareUrl && (
                    <View style={styles.linkContainer}>
                      <Text style={styles.linkText} numberOfLines={1}>
                        {shareUrl}
                      </Text>
                      <TouchableOpacity
                        onPress={() => copyToClipboard(shareUrl)}
                        style={styles.copyLinkButton}
                      >
                        <Copy size={16} color="#6B7280" />
                      </TouchableOpacity>
                    </View>
                  )}
                </View>
              </TouchableOpacity>

              {/* Copy Text */}
              <TouchableOpacity
                style={styles.option}
                onPress={() => copyToClipboard(generateShareableText())}
              >
                <View style={styles.optionIcon}>
                  <Copy size={20} color="#059669" />
                </View>
                <View style={styles.optionContent}>
                  <Text style={styles.optionTitle}>Copy as Text</Text>
                  <Text style={styles.optionDescription}>
                    Copy the entire conversation
                  </Text>
                </View>
              </TouchableOpacity>

              {/* Native Share */}
              <TouchableOpacity style={styles.option} onPress={shareNative}>
                <View style={styles.optionIcon}>
                  <ShareIcon size={20} color="#8B5CF6" />
                </View>
                <View style={styles.optionContent}>
                  <Text style={styles.optionTitle}>Share via...</Text>
                  <Text style={styles.optionDescription}>
                    Use your device‚Äôs share menu
                  </Text>
                </View>
              </TouchableOpacity>

              {/* Download */}
              {Platform.OS === 'web' && (
                <TouchableOpacity style={styles.option} onPress={downloadAsFile}>
                  <View style={styles.optionIcon}>
                    <Download size={20} color="#DC2626" />
                  </View>
                  <View style={styles.optionContent}>
                    <Text style={styles.optionTitle}>Download as File</Text>
                    <Text style={styles.optionDescription}>
                      Save as a text file
                    </Text>
                  </View>
                </TouchableOpacity>
              )}

              {/* Email */}
              <TouchableOpacity
                style={styles.option}
                onPress={() => {
                  const subject = encodeURIComponent(`Chat: ${chatTitle}`);
                  const body = encodeURIComponent(generateShareableText());
                  const mailto = `mailto:?subject=${subject}&body=${body}`;
                  Platform.OS === 'web'
                    ? window.open(mailto)
                    : Share.share({ message: generateShareableText(), title: chatTitle });
                }}
              >
                <View style={styles.optionIcon}>
                  <Mail size={20} color="#F59E0B" />
                </View>
                <View style={styles.optionContent}>
                  <Text style={styles.optionTitle}>Email</Text>
                  <Text style={styles.optionDescription}>Share via email</Text>
                </View>
              </TouchableOpacity>
            </View>

            {/* Privacy */}
            <View style={styles.privacyNotice}>
              <Text style={styles.privacyText}>
                üîí Your conversations are private. Only people with the share link can view shared chats.
              </Text>
            </View>
          </ScrollView>

          {/* Footer */}
          <View style={styles.actions}>
            <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
              <Text style={styles.cancelButtonText}>Close</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modal: {
    backgroundColor: '#fff',
    borderRadius: 12,
    width: '100%',
    maxWidth: 500,
    maxHeight: '80%',
    flex: 1,            // ‚Üê allow the ScrollView to expand
    overflow: 'hidden', // ‚Üê ensure it respects maxHeight
    elevation: 10,
    shadowColor: '#000',
    shadowOpacity: 0.25,
    shadowRadius: 10,
    shadowOffset: { width: 0, height: 4 },
  },
  mobileModal: {
    maxWidth: '100%',
    maxHeight: '90%',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  title: { fontSize: 18, fontWeight: '600', color: '#111827' },
  closeButton: { padding: 4 },
  content: { flex: 1, paddingHorizontal: 24 },
  subtitle: { fontSize: 14, color: '#6B7280', marginVertical: 16 },
  optionsContainer: { gap: 12 },
  option: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#F9FAFB',
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  optionIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#fff',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  optionContent: { flex: 1 },
  optionTitle: { fontSize: 16, fontWeight: '600', color: '#111827', marginBottom: 4 },
  optionDescription: { fontSize: 14, color: '#6B7280', lineHeight: 20 },
  linkContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 8,
    backgroundColor: '#fff',
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#D1D5DB',
    padding: 8,
  },
  linkText: {
    flex: 1,
    fontSize: 13,
    color: '#3B82F6',
    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',
  },
  copyLinkButton: { padding: 4, marginLeft: 8 },
  privacyNotice: {
    backgroundColor: '#F0FDF4',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#BBF7D0',
    padding: 16,
    marginVertical: 20,
  },
  privacyText: { fontSize: 13, color: '#166534', lineHeight: 18 },
  actions: {
    padding: 24,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  cancelButton: {
    backgroundColor: '#000000',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
    alignSelf: 'center',
  },
  cancelButtonText: { fontSize: 16, fontWeight: '600', color: '#FFFFFF' },
});

export default ShareChat;
